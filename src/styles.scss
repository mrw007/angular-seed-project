// Angular Material theming
@use '@angular/material' as mat;

/* You can add global styles to this file, and also import other style files */
// FontAwsome Icons
@import url('https://use.fontawesome.com/releases/v5.10.2/css/all.css');

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// **Be sure that you only ever include this mixin once!**
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-typography-config());`
@include mat.all-component-typographies();
@include mat.elevation-classes();
@include mat.app-background();

// Define the default theme (same as the example above).
@import './themes/default-theme.scss';
@import './themes/dark-theme.scss';

// Local Imports
@import './scss/colors.scss';
@import 'material-design-icons/iconfont/material-icons.css';

// Import other mixins
@import './scss/main-sidenav-style.scss';
@import './scss/secondary-sidenav-style.scss';
@import './scss/app_styles.scss';
@import './scss/avatar-bar-style.scss';


@mixin custom-components-theme($theme, $colors) {
  @include main-sidenav-theme($theme, $colors);
  @include secondary-sidenav-theme($theme, $colors);
  @include app-style-theme($theme, $colors);
  @include avatar-bar-theme($theme, $colors);
}

@include mat.all-component-themes($candy-app-theme);
// Include the default theme styles.
.default-theme {
  @include custom-components-theme($candy-app-theme, $colors-default-theme);
}

// Include the alternative theme styles inside of a block with a CSS class. You can make this
// CSS class whatever you want. In this example, any component inside of an element with
// `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme.
.black-theme {
  @include mat.all-component-colors($black-theme);
  @include custom-components-theme($black-theme, $colors-dark-theme);
}

::-webkit-scrollbar-track {
  background-color: #f5f5f5;
}

::-webkit-scrollbar {
  width: 7px;
  height: 7px;
  background-color: #f5f5f5;
}

::-webkit-scrollbar-thumb {
  background-color: #585858;
}

input[type='number']::-webkit-inner-spin-button,
input[type='number']::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.scroller {
  scrollbar-color: hsl(0, 0%, 35%) hsl(0, 0%, 96%); /* thumb and track color */
  scrollbar-width: thin;
}

body {
  .black-theme {
    .mat-mdc-card,
    .mat-expansion-panel,
    .mat-mdc-paginator,
    .mat-drawer-container {
      background-color: transparent;
    }

    .mat-mdc-table {
      background-color: map-get($colors-dark-theme, container-background);
    }

    .mat-mdc-dialog-container {
      background-color: map-get($colors-dark-theme, container-background);
    }
  }

  .default-theme {
    .mat-drawer-container {
      background-color: transparent;
    }

    .mat-mdc-dialog-container {
      background-color: map-get($colors-default-theme, container-background);
    }
  }

  .black-theme,
  .default-theme {
    .mat-mdc-snack-bar-container {
      color: #ffeded !important;
      background-color: #424242 !important;

      .mat-mdc-simple-snack-bar {
        .mat-mdc-button {
          color: mat.get-theme-color($candy-app-theme, accent);
        }
      }
    }
  }
}
